/* state-switch version 0.4.5 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.window = {})));
}(this, (function (exports) { 'use strict';

const version = "0.4.5";

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 *
 * Wechaty: Wechat for Bot. and for human who talk to bot/robot
 *
 * Class StateSwitch
 * Licenst: Apache-2.0
 * https://github.com/zixia/state-switcher
 *
 * Helper Class for Manage State Change
 */
const NOP = require('nop');
const VERSION = version;
class StateSwitch {
    constructor(_name = 'Lock', logInstance) {
        this._name = _name;
        if (logInstance) {
            this.setLog(logInstance); // init log, should be a Brolog or Npmlog instance
        }
        else {
            this.setLog(null);
        }
        this.log.verbose('StateSwitch', 'constructor(name=%s)', _name);
        this._on = false;
        this._pending = false;
        /**
         * for ready()
         */
        this.offPromise = Promise.resolve();
        this.onPromise = new Promise(r => {
            this.onResolver = r;
        });
        this.offResolver = NOP;
    }
    version() {
        return VERSION;
    }
    setLog(logInstance) {
        if (logInstance) {
            this.log = logInstance;
        }
        else {
            this.log = {
                silly(...args) { },
                verbose(...args) { },
                warn(...args) { },
                error(...args) { },
            };
        }
    }
    /**
     * set/get ON state
     */
    on(state) {
        if (state) {
            this.log.verbose('StateSwitch', '<%s> on(%s) <- (%s)', this._name, state, this.on());
            this._on = true;
            this._pending = (state === 'pending');
            /**
             * for ready()
             */
            if (this.offResolver === NOP) {
                this.offPromise = new Promise(r => this.offResolver = r);
            }
            if (state === true && this.onResolver !== NOP) {
                this.onResolver();
                this.onResolver = NOP;
            }
            return;
        }
        const on = this._on
            ? this._pending ? 'pending' : true
            : false;
        this.log.silly('StateSwitch', '<%s> on() is %s', this._name, on);
        return on;
    }
    /**
     * set/get OFF state
     */
    off(state) {
        if (state) {
            this.log.verbose('StateSwitch', '<%s> off(%s) <- (%s)', this._name, state, this.off());
            this._on = false;
            this._pending = (state === 'pending');
            /**
             * for ready()
             */
            if (this.onResolver === NOP) {
                this.onPromise = new Promise(r => this.onResolver = r);
            }
            if (state === true && this.offResolver !== NOP) {
                this.offResolver();
                this.offResolver = NOP;
            }
            return;
        }
        const off = !this._on
            ? this._pending ? 'pending' : true
            : false;
        this.log.silly('StateSwitch', '<%s> off() is %s', this._name, off);
        return off;
    }
    ready(state = 'on', noCross = false) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log.verbose('StateSwitch', 'ready(%s, %s)', state, noCross);
            if (state === 'on') {
                if (this._on === false && noCross === true) {
                    throw new Error(`ready(on) but the state is off. call ready(on, true) to force crossWait`);
                }
                yield this.onPromise;
            }
            else { // state === off
                if (this._on === true && noCross === true) {
                    throw new Error('ready(off) but the state is on. call ready(off, true) to force crossWait');
                }
                yield this.offPromise;
            }
            this.log.silly('StateSwitch', 'ready(%s, %s)-ed.', state, noCross);
        });
    }
    /**
     * does the state is not stable(in process)?
     */
    pending() {
        this.log.silly('StateSwitch', '<%s> pending() is %s', this._name, this._pending);
        return this._pending;
    }
    /**
     * get the client name
     */
    name() {
        return this._name;
    }
}

exports.VERSION = VERSION;
exports.StateSwitch = StateSwitch;
exports['default'] = StateSwitch;

Object.defineProperty(exports, '__esModule', { value: true });

})));
/* https://github.com/zixia */
//# sourceMappingURL=state-switch.es6.umd.js.map
