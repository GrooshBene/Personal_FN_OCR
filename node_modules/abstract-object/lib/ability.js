(function() {
  var OBJECT_STATES, OBJECT_STATES_STR, Stateable, createObject, createObjectWith, customAbility, defineProperty, isArray, isFunction, isUndefined;

  customAbility = require('custom-ability');

  createObject = require('inherits-ex/lib/createObject');

  createObjectWith = require('inherits-ex/lib/createObjectWith');

  isArray = require('util-ex/lib/is/type/array');

  isFunction = require('util-ex/lib/is/type/function');

  isUndefined = require('util-ex/lib/is/type/undefined');

  defineProperty = require('util-ex/lib/defineProperty');

  OBJECT_STATES = {
    initing: 1,
    inited: 2,
    destroying: 0,
    destroyed: null
  };

  OBJECT_STATES_STR = ['destroying', 'initing', 'inited'];

  Stateable = (function() {
    var s, vState, vStateName;

    function Stateable() {}

    Stateable.prototype.OBJECT_STATES = OBJECT_STATES;

    Stateable.OBJECT_STATES_STR = OBJECT_STATES_STR;

    defineProperty(Stateable.prototype, 'objectState', null, {
      get: function() {
        var vState;
        vState = this._objectState_;
        if (vState == null) {
          return 'destroyed';
        } else {
          return OBJECT_STATES_STR[vState];
        }
      }
    });

    for (vStateName in OBJECT_STATES) {
      vState = OBJECT_STATES[vStateName];
      s = 'is' + vStateName[0].toUpperCase() + vStateName.slice(1);
      Stateable.prototype[s] = (function(aState) {
        return function() {
          return this._objectState_ === aState;
        };
      })(vState);
    }

    Stateable.prototype.setObjectState = function(value) {
      this._objectState_ = OBJECT_STATES[value];
    };

    Stateable.prototype.changeObjectState = function(value) {
      this._objectState_ = value;
    };

    Stateable.prototype.initialize = function() {
      if (isFunction(this.init)) {
        console.error('init method is deprecated, pls use initialize instead');
        if (!Stateable.prototype.init) {
          Stateable.prototype.init = (function() {});
        }
        return this.init.apply(this, arguments);
      }
    };

    Stateable.prototype.finalize = function() {
      if (isFunction(this.final)) {
        console.error('final method is deprecated, pls use finalize instead');
        if (!Stateable.prototype.final) {
          Stateable.prototype.final = (function() {});
        }
        return this.final.apply(this, arguments);
      }
    };

    Stateable.prototype._constructor = function() {
      defineProperty(this, '_objectState_', null);
      this.changeObjectState(OBJECT_STATES.initing);
      if (this.initialize.apply(this, arguments) !== true) {
        return this.changeObjectState(OBJECT_STATES.inited);
      }
    };

    Stateable.prototype.destroy = function() {
      this.changeObjectState(OBJECT_STATES.destroying);
      this.finalize.apply(this, arguments);
      this.changeObjectState(OBJECT_STATES.destroyed);
      return this.removeAllListeners();
    };

    Stateable.prototype.free = function() {
      return this.destroy.apply(this, arguments);
    };

    Stateable.create = createObject;

    Stateable.createWith = createObjectWith;

    return Stateable;

  })();

  module.exports = customAbility(Stateable, 'objectState');

}).call(this);

//# sourceMappingURL=ability.js.map
