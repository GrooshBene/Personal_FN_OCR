(function() {
  var AbstractObject, OBJECT_STATES_STR, extend, isArray, isFunction, isUndefined;

  extend = require('util-ex/lib/_extend');

  isArray = require('util-ex/lib/is/type/array');

  isFunction = require('util-ex/lib/is/type/function');

  isUndefined = require('util-ex/lib/is/type/undefined');

  AbstractObject = require('./abstract-object');

  OBJECT_STATES_STR = AbstractObject.OBJECT_STATES_STR;

  module.exports = function(aOptions) {
    if (!aOptions) {
      aOptions = {};
    }
    if (!aOptions.methods) {
      aOptions.methods = {};
    }
    extend(aOptions.methods, {
      initialize: function() {
        var self;
        self = this.self;
        self.setMaxListeners(Infinity);
        return this["super"].apply(self, arguments);
      },
      setObjectState: function(value, emitted) {
        var self;
        if (emitted == null) {
          emitted = true;
        }
        self = this.self;
        this["super"].call(self, value);
        if (emitted) {
          self.emit(value, self);
        }
      },
      changeObjectState: function(value, emitted) {
        var self;
        if (emitted == null) {
          emitted = true;
        }
        self = this.self;
        this["super"].call(self, value);
        if (emitted) {
          if (value == null) {
            return self.emit("destroyed", self);
          } else {
            return self.emit(OBJECT_STATES_STR[value], self);
          }
        }
      },
      dispatch: function(event, args, callback) {
        if (isUndefined(callback) && isFunction(args)) {
          callback = args;
          args = [];
        } else if (!isArray(args)) {
          args = [args];
        }
        if (callback && callback.apply(this, args) !== false) {
          return;
        }
        args.splice(0, 0, event);
        return this.emit.apply(this, args);
      },
      dispatchError: function(error, callback) {
        if (callback && callback(error) !== false) {
          return;
        }
        return this.emit('error', error);
      }
    });
    return aOptions;
  };

}).call(this);

//# sourceMappingURL=eventable-options.js.map
