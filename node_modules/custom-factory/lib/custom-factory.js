(function() {
  var createObject, deprecate, exports, extend, getObjectKeys, inherits, isFunction, isInheritedFrom, isObject, isString,
    slice = [].slice;

  deprecate = require('depd')('custom-factory');

  inherits = require('inherits-ex/lib/inherits');

  isInheritedFrom = require('inherits-ex/lib/isInheritedFrom');

  createObject = require('inherits-ex/lib/createObject');

  extend = require('./extend');

  isFunction = function(v) {
    return 'function' === typeof v;
  };

  isString = function(v) {
    return 'string' === typeof v;
  };

  isObject = function(v) {
    return (v != null) && 'object' === typeof v;
  };

  getObjectKeys = Object.keys;

  exports = module.exports = function(Factory, aOptions) {
    var CustomFactory, aliases, baseNameOnly, extendClass, flatOnly, formatName, getClassNameList, getInstance, registeredObjects, vNewGetInstance;
    if (isObject(aOptions)) {
      flatOnly = aOptions.flatOnly;
      if (aOptions.baseNameOnly != null) {
        baseNameOnly = aOptions.baseNameOnly;
      }
    }
    if (baseNameOnly == null) {
      baseNameOnly = 1;
    }
    extend(Factory, {
      ROOT_NAME: Factory.name,
      getClassList: function(ctor) {
        var item, result;
        return result = (function() {
          var results;
          results = [];
          while (ctor && ctor !== Factory) {
            item = ctor;
            ctor = ctor.super_;
            results.push(item);
          }
          return results;
        })();
      },
      getClassNameList: getClassNameList = function(ctor) {
        var item, result;
        return result = (function() {
          var results;
          results = [];
          while (ctor && ctor !== Factory) {
            item = ctor.prototype.name;
            ctor = ctor.super_;
            results.push(item);
          }
          return results;
        })();
      },
      path: function(aClass, aRootName) {
        return '/' + this.pathArray(aClass, aRootName).join('/');
      },
      pathArray: function(aClass, aRootName) {
        var i, result;
        result = aClass.prototype.name;
        if (result && result[0] === '/') {
          return result.split('/').filter(Boolean);
        }
        if (aRootName == null) {
          aRootName = Factory.ROOT_NAME;
        }
        result = getClassNameList(aClass);
        if (aRootName) {
          result.push(aRootName);
        }
        if (Factory.formatName !== formatName) {
          result = (function() {
            var j, len1, results;
            results = [];
            for (j = 0, len1 = result.length; j < len1; j++) {
              i = result[j];
              results.push(Factory.formatName(i));
            }
            return results;
          })();
        }
        return result.reverse();
      },
      _objects: registeredObjects = {},
      _aliases: aliases = {},
      formatName: formatName = function(aName) {
        return aName;
      },
      getNameFrom: function(aClass) {
        if (isFunction(aClass)) {
          return aClass.prototype.name;
        } else {
          return Factory.formatName(aClass);
        }
      },
      getNameFromClass: function(aClass, aParentClass, aBaseNameOnly) {
        var j, len, len1, names, ref, result, vFactoryName;
        result = aClass.name;
        len = result.length;
        if (!len) {
          throw new InvalidArgumentError('can not getNameFromClass: the ' + vFactoryName + '(constructor) has no name error.');
        }
        if (aBaseNameOnly == null) {
          aBaseNameOnly = baseNameOnly;
        }

        /*
        vFactoryName = Factory.name
        if vFactoryName and vFactoryName.length and
           result.substring(len-vFactoryName.length) is vFactoryName
          result = result.substring(0, len-vFactoryName.length)
         */
        if (aBaseNameOnly) {
          if (!aParentClass) {
            aParentClass = aClass.super_;
          }
          names = getClassNameList(aParentClass);
          names.push(Factory.name);
          if (names.length) {
            ref = names.reverse();
            for (j = 0, len1 = ref.length; j < len1; j++) {
              vFactoryName = ref[j];
              if (vFactoryName && vFactoryName.length && result.substring(len - vFactoryName.length) === vFactoryName) {
                result = result.substring(0, len - vFactoryName.length);
                len = result.length;
              }
              if (!--aBaseNameOnly) {
                break;
              }
            }
          }
        }
        return Factory.formatName(result);
      },
      _get: getInstance = function(aName, aOptions) {
        var cls, result;
        result = registeredObjects[aName];
        if (result === void 0) {
          aName = Factory.getRealNameFromAlias(aName);
          if (aName) {
            result = registeredObjects[aName];
          }
          if (result === void 0) {
            return;
          }
        }
        if (result instanceof Factory) {
          if (aOptions != null) {
            result.initialize(aOptions);
          }
        } else {
          result = isObject(result) ? extend(result, aOptions) : aOptions != null ? aOptions : result;
          cls = Factory[aName];
          if (cls) {
            result = createObject(cls, void 0, result);
            registeredObjects[aName] = result;
          } else {
            result = void 0;
          }
        }
        return result;
      },
      get: function(aName, aOptions) {
        return getInstance(aName, aOptions);
      },
      extendClass: extendClass = function(aParentClass) {
        var _register, alias;
        extend(aParentClass, {
          forEachClass: function(cb) {
            var j, k, len1, ref, v;
            if (isFunction(cb)) {
              ref = getObjectKeys(aParentClass);
              for (j = 0, len1 = ref.length; j < len1; j++) {
                k = ref[j];
                v = aParentClass[k];
                if (isInheritedFrom(v, Factory)) {
                  if (cb(v, k) === 'brk') {
                    break;
                  }
                }
              }
            }
            return aParentClass;
          },
          forEach: function(aOptions, cb) {
            if (isFunction(aOptions)) {
              cb = aOptions;
              aOptions = null;
            }
            if (isFunction(cb)) {
              aParentClass.forEachClass(function(v, k) {
                return cb(Factory.get(k, aOptions), k);
              });
            }
            return aParentClass;
          },
          register: _register = function(aClass, aOptions) {
            var result, vBaseNameOnly, vCreateOnDemand, vDisplayName, vName;
            if (isString(aOptions)) {
              vName = aOptions;
            } else if (aOptions) {
              vName = aOptions.name;
              vDisplayName = aOptions.displayName;
              vCreateOnDemand = aOptions.createOnDemand;
            }
            if (!vName) {
              if (aOptions && aOptions.baseNameOnly) {
                vBaseNameOnly = aOptions.baseNameOnly;
              } else {
                vBaseNameOnly = baseNameOnly;
              }
              vName = Factory.getNameFromClass(aClass, aParentClass, vBaseNameOnly);
            } else {
              vName = Factory.formatName(vName);
            }
            result = !registeredObjects.hasOwnProperty(vName);
            if (!result) {
              throw new TypeError('the ' + vName + ' has already been registered.');
            }
            result = inherits(aClass, aParentClass);
            if (result) {
              if (!flatOnly) {
                extendClass(aClass);
              }
              aClass.prototype.name = vName;
              if (vDisplayName) {
                aClass.prototype._displayName = vDisplayName;
              }
              if (result) {
                aParentClass[vName] = aClass;
                if (aParentClass !== Factory) {
                  Factory[vName] = aClass;
                }
                if (vCreateOnDemand !== false) {
                  registeredObjects[vName] = aOptions != null ? aOptions : null;
                } else {
                  registeredObjects[vName] = createObject(aClass, void 0, aOptions);
                }
              }
            }
            return result;
          },
          _register: _register,
          unregister: function(aName) {
            var k, result, v, vClass;
            if (isString(aName)) {
              aName = Factory.formatName(aName);
              vClass = Factory.hasOwnProperty(aName) && Factory[aName];
            } else {
              vClass = aName;
            }
            result = vClass && isInheritedFrom(vClass, aParentClass);
            if (result) {
              aName = vClass.prototype.name;
              while (vClass && vClass.super_ && vClass.super_ !== Factory) {
                vClass = vClass.super_;
                delete vClass[aName];
              }
              delete registeredObjects[aName];
              delete Factory[aName];
              for (k in aliases) {
                v = aliases[k];
                if (v === aName) {
                  delete aliases[k];
                }
              }
            }
            return !!result;
          },
          registeredClass: function(aName) {
            var result;
            aName = Factory.formatName(aName);
            result = aParentClass.hasOwnProperty(aName) && aParentClass[aName];
            if (result) {
              return result;
            }
            aName = Factory.getRealNameFromAlias(aName);
            if (aName) {
              return aParentClass.hasOwnProperty(aName) && aParentClass[aName];
            }
          }
        });
        if (!flatOnly || aParentClass === Factory) {
          return extend(aParentClass, {
            getRealNameFromAlias: function(alias) {
              return aliases[alias];
            },
            displayName: function(aClass, aValue) {
              var k, result, v, vClassName;
              if (isString(aClass)) {
                aValue = aClass;
                aClass = aParentClass;
              }
              if (isString(aValue)) {
                if (isFunction(aClass)) {
                  if (!aValue) {
                    vClassName = Factory.getNameFrom(aClass);
                    for (k in aliases) {
                      v = aliases[k];
                      if (v === vClassName) {
                        aValue = k;
                        break;
                      }
                    }
                  }
                  if (aValue) {
                    aClass.prototype._displayName = aValue;
                  } else {
                    delete aClass.prototype._displayName;
                  }
                } else {
                  throw new TypeError('set displayName: Invalid Class');
                }
                return;
              }
              if (!aClass) {
                aClass = aParentClass;
              }
              if (isFunction(aClass)) {
                if (aClass.prototype.hasOwnProperty('_displayName')) {
                  result = aClass.prototype._displayName;
                }
                if (result == null) {
                  result = aClass.prototype.name;
                }
              } else {
                throw new TypeError('get displayName: Invalid Class');
              }
              return result;
            },
            alias: alias = function() {
              var aAliases, aClass, j, k, len1, result, v, vClass;
              aClass = arguments[0], aAliases = 2 <= arguments.length ? slice.call(arguments, 1) : [];
              if (aAliases.length) {
                vClass = aClass;
                aClass = Factory.getNameFrom(aClass);
                aAliases = aAliases.map(Factory.formatName);
                if (!isFunction(vClass)) {
                  vClass = Factory.registeredClass(aClass);
                }
                if (vClass && !vClass.prototype.hasOwnProperty('_displayName')) {
                  vClass.prototype._displayName = aAliases[0];
                }
                for (j = 0, len1 = aAliases.length; j < len1; j++) {
                  alias = aAliases[j];
                  aliases[alias] = aClass;
                }
                return;
              }
              if (!aClass) {
                aClass = aParentClass;
              }
              aClass = Factory.getNameFrom(aClass);
              result = [];
              for (k in aliases) {
                v = aliases[k];
                if (v === aClass) {
                  result.push(k);
                }
              }
              return result;
            },
            aliases: alias,
            create: function(aName, aOptions) {
              var result;
              result = aParentClass.registeredClass(aName);
              if (result === void 0 && aParentClass !== Factory) {
                result = Factory.registeredClass(aName);
              }
              if (result) {
                return createObject(result, aOptions);
              }
            }
          });
        }
      }
    });
    Factory.extendClass(Factory);
    Factory.prototype._objects = registeredObjects;
    Factory.prototype._aliases = aliases;
    deprecate.property(Factory, '_objects', 'use Factory::_objects instead');
    deprecate.property(Factory, '_aliases', 'use Factory::_aliases instead');
    Factory.register = function(aClass, aParentClass, aOptions) {
      if (aParentClass) {
        if (!isFunction(aParentClass || !isInheritedFrom(aParentClass, Factory))) {
          aOptions = aParentClass;
          aParentClass = aOptions.parent;
          if (flatOnly || !aParentClass) {
            aParentClass = Factory;
          }
        } else if (flatOnly) {
          throw new TypeError("It's a flat factory, register to the parent class is not allowed");
        }
      } else {
        aParentClass = Factory;
      }
      if (aParentClass === Factory) {
        return Factory._register(aClass, aOptions);
      } else {
        return aParentClass.register(aClass, aOptions);
      }
    };
    if (aOptions && isFunction(aOptions.fnGet)) {
      vNewGetInstance = aOptions.fnGet;
      getInstance = (function(inherited) {
        var that;
        that = {
          "super": inherited,
          self: this
        };
        return function() {
          return vNewGetInstance.apply(that, arguments);
        };
      })(Factory._get);
      Factory.get = getInstance;
    }
    return CustomFactory = (function() {
      function CustomFactory(aName, aOptions) {
        var vCaller;
        if (aName instanceof Factory) {
          if (aOptions != null) {
            aName.initialize(aOptions);
          }
          return aName;
        }
        if (aName) {
          if (isObject(aName)) {
            aOptions = aName;
            aName = aOptions.name;
          } else if (!isString(aName)) {
            aOptions = aName;
            aName = void 0;
          }
        }
        if (!(this instanceof Factory)) {
          if (!aName) {
            try {
              vCaller = arguments.callee.caller;
            } catch (undefined) {}
            if (vCaller && isInheritedFrom(vCaller, Factory)) {
              aName = vCaller;
              vCaller = vCaller.caller;
              while (isInheritedFrom(vCaller, aName)) {
                aName = vCaller;
                vCaller = vCaller.caller;
              }
              if (aName) {
                aName = aName.prototype.name;
              }
            }
            if (!aName) {
              return;
            }
          } else {
            aName = Factory.formatName(aName);
          }
          return Factory.get(aName, aOptions);
        } else {
          this.initialize(aOptions);
        }
      }

      CustomFactory.prototype.initialize = function(aOptions) {};

      CustomFactory.prototype.toString = function() {
        return this.name;
      };

      CustomFactory.prototype.getFactoryItem = function(aName, aOptions) {
        return Factory.get.call(this, aName, aOptions);
      };

      CustomFactory.prototype.aliases = function() {
        return this.Class.aliases.apply(this, arguments);
      };

      CustomFactory.prototype.displayName = function(aClass, aValue) {
        return this.Class.displayName.call(this, aClass, aValue);
      };

      if (!flatOnly) {
        CustomFactory.prototype.register = function(aClass, aOptions) {
          return this.Class.register.call(this, aClass, aOptions);
        };
        CustomFactory.prototype.unregister = function(aName) {
          return this.Class.unregister.call(this, aName);
        };
        CustomFactory.prototype.registered = function(aName) {
          return Factory(aName);
        };
        CustomFactory.prototype.registeredClass = function(aName) {
          var result;
          aName = Factory.formatName(aName);
          result = this.Class.hasOwnProperty(aName) && this.Class[aName];
          if (result) {
            return result;
          }
          aName = Factory.getRealNameFromAlias.call(this, aName);
          if (aName) {
            return this.Class.hasOwnProperty(aName) && this.Class[aName];
          }
        };
        CustomFactory.prototype.path = function(aRootName) {
          return '/' + this.pathArray(aRootName).join('/');
        };
        CustomFactory.prototype.pathArray = function(aRootName) {
          return Factory.pathArray(this.Class, aRootName);
        };
      }

      inherits(Factory, CustomFactory);

      return CustomFactory;

    })();
  };

}).call(this);

//# sourceMappingURL=custom-factory.js.map
